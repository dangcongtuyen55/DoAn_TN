{
    "sourceFile": "back-end/src/app/controllers/authController.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 64,
            "patches": [
                {
                    "date": 1651851975438,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1651939459041,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -25,8 +25,9 @@\n       username: req.body.name,\r\n     });\r\n     if (!user) {\r\n       //email is not correct\r\n+      const err = new Error(\"Email not correct!\");\r\n     }\r\n     //body.password = password entered , user.password = encrypted password in db\r\n     if (bcrypt.compareSync(req.body.password, user.password)) {\r\n       const token = jwt.sign({ userId: user._id }, process.env.APP_SECRET);\r\n"
                },
                {
                    "date": 1651939475865,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -26,8 +26,9 @@\n     });\r\n     if (!user) {\r\n       //email is not correct\r\n       const err = new Error(\"Email not correct!\");\r\n+      err.statusCode = 400;\r\n     }\r\n     //body.password = password entered , user.password = encrypted password in db\r\n     if (bcrypt.compareSync(req.body.password, user.password)) {\r\n       const token = jwt.sign({ userId: user._id }, process.env.APP_SECRET);\r\n"
                },
                {
                    "date": 1651939504692,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -27,8 +27,9 @@\n     if (!user) {\r\n       //email is not correct\r\n       const err = new Error(\"Email not correct!\");\r\n       err.statusCode = 400;\r\n+      return next(err);\r\n     }\r\n     //body.password = password entered , user.password = encrypted password in db\r\n     if (bcrypt.compareSync(req.body.password, user.password)) {\r\n       const token = jwt.sign({ userId: user._id }, process.env.APP_SECRET);\r\n"
                },
                {
                    "date": 1651939529126,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -41,8 +41,12 @@\n         },\r\n       });\r\n     } else {\r\n       //password is not correct\r\n+\r\n+      const err = new Error(\"Password not correct!\");\r\n+      err.statusCode = 400;\r\n+      return next(err);\r\n     }\r\n   } catch (error) {\r\n     res.json(error);\r\n   }\r\n"
                },
                {
                    "date": 1651943166714,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -13,9 +13,9 @@\n         userName: user.name,\r\n       },\r\n     });\r\n   } catch (error) {\r\n-    res.json({ error: error });\r\n+    next(error);\r\n   }\r\n };\r\n \r\n exports.login = async (req, res, next) => {\r\n"
                },
                {
                    "date": 1651944199811,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -47,7 +47,7 @@\n       err.statusCode = 400;\r\n       return next(err);\r\n     }\r\n   } catch (error) {\r\n-    res.json(error);\r\n+    next(error);\r\n   }\r\n };\r\n"
                },
                {
                    "date": 1653149104555,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -3,9 +3,18 @@\n const bcrypt = require(\"bcryptjs\");\r\n exports.register = async (req, res, next) => {\r\n   try {\r\n     //req.body - name, email, password\r\n-    const user = await authModel.create(req.body);\r\n+    const { name, email, password } = req.body;\r\n+    const user = await authModel.create({\r\n+      name,\r\n+      email,\r\n+      password,\r\n+      avatar: {\r\n+        public_id: \"this is a sample id\",\r\n+        url: \"ProfilePicUrl\",\r\n+      },\r\n+    });\r\n     const token = await jwt.sign({ userId: user._id }, process.env.APP_SECRET);\r\n     res.status(200).json({\r\n       status: \"success\",\r\n       data: {\r\n"
                },
                {
                    "date": 1653708892971,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -18,9 +18,9 @@\n     res.status(200).json({\r\n       status: \"success\",\r\n       data: {\r\n         token,\r\n-        userName: user.name,\r\n+        user,\r\n       },\r\n     });\r\n   } catch (error) {\r\n     next(error);\r\n"
                },
                {
                    "date": 1653720243877,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -13,9 +13,10 @@\n         public_id: \"this is a sample id\",\r\n         url: \"ProfilePicUrl\",\r\n       },\r\n     });\r\n-    const token = await jwt.sign({ userId: user._id }, process.env.APP_SECRET);\r\n+    // const token = await jwt.sign({ userId: user._id }, process.env.APP_SECRET);\r\n+    const token = user.getJWTToken();\r\n     res.status(200).json({\r\n       status: \"success\",\r\n       data: {\r\n         token,\r\n"
                },
                {
                    "date": 1653720254488,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -18,10 +18,10 @@\n     const token = user.getJWTToken();\r\n     res.status(200).json({\r\n       status: \"success\",\r\n       data: {\r\n+        user,\r\n         token,\r\n-        user,\r\n       },\r\n     });\r\n   } catch (error) {\r\n     next(error);\r\n"
                },
                {
                    "date": 1653720986148,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -27,37 +27,45 @@\n     next(error);\r\n   }\r\n };\r\n \r\n+// exports.login = async (req, res, next) => {\r\n+//   try {\r\n+//     const user = await authModel.findOne({\r\n+//       email: req.body.email,\r\n+//       username: req.body.name,\r\n+//     });\r\n+//     if (!user) {\r\n+//       //email is not correct\r\n+//       const err = new Error(\"Email not correct!\");\r\n+//       err.statusCode = 400;\r\n+//       return next(err);\r\n+//     }\r\n+//     //body.password = password entered , user.password = encrypted password in db\r\n+//     if (bcrypt.compareSync(req.body.password, user.password)) {\r\n+//       const token = jwt.sign({ userId: user._id }, process.env.APP_SECRET);\r\n+//       res.status(200).json({\r\n+//         status: \"success\",\r\n+//         data: {\r\n+//           token,\r\n+//           userName: user.name,\r\n+//         },\r\n+//       });\r\n+//     } else {\r\n+//       //password is not correct\r\n+\r\n+//       const err = new Error(\"Password not correct!\");\r\n+//       err.statusCode = 400;\r\n+//       return next(err);\r\n+//     }\r\n+//   } catch (error) {\r\n+//     next(error);\r\n+//   }\r\n+// };\r\n+\r\n exports.login = async (req, res, next) => {\r\n-  try {\r\n-    const user = await authModel.findOne({\r\n-      email: req.body.email,\r\n-      username: req.body.name,\r\n-    });\r\n-    if (!user) {\r\n-      //email is not correct\r\n-      const err = new Error(\"Email not correct!\");\r\n-      err.statusCode = 400;\r\n-      return next(err);\r\n-    }\r\n-    //body.password = password entered , user.password = encrypted password in db\r\n-    if (bcrypt.compareSync(req.body.password, user.password)) {\r\n-      const token = jwt.sign({ userId: user._id }, process.env.APP_SECRET);\r\n-      res.status(200).json({\r\n-        status: \"success\",\r\n-        data: {\r\n-          token,\r\n-          userName: user.name,\r\n-        },\r\n-      });\r\n-    } else {\r\n-      //password is not correct\r\n+  const { email, password } = req.body;\r\n \r\n-      const err = new Error(\"Password not correct!\");\r\n-      err.statusCode = 400;\r\n-      return next(err);\r\n-    }\r\n-  } catch (error) {\r\n-    next(error);\r\n+  if (!email || !password) {\r\n+    return next(new ErrorHander(\"Please Enter Email && Password !!!\"));\r\n   }\r\n };\r\n"
                },
                {
                    "date": 1653721085190,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -65,7 +65,11 @@\n exports.login = async (req, res, next) => {\r\n   const { email, password } = req.body;\r\n \r\n   if (!email || !password) {\r\n-    return next(new ErrorHander(\"Please Enter Email && Password !!!\"));\r\n+    return next(new ErrorHander(\"Please Enter Email && Password !!!\", 400));\r\n   }\r\n+  const user = await authModel.findOne({ email }).select(\"+password\");\r\n+  if (!user) {\r\n+    return next(new ErrorHander(\"Invalid Email or Password\"));\r\n+  }\r\n };\r\n"
                },
                {
                    "date": 1653721452843,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -69,7 +69,11 @@\n     return next(new ErrorHander(\"Please Enter Email && Password !!!\", 400));\r\n   }\r\n   const user = await authModel.findOne({ email }).select(\"+password\");\r\n   if (!user) {\r\n-    return next(new ErrorHander(\"Invalid Email or Password\"));\r\n+    return next(new ErrorHander(\"Invalid Email or Password\", 401));\r\n   }\r\n+  const isPasswordMatched = user.comparePassword();\r\n+  if (!isPasswordMatched) {\r\n+    return next(new ErrorHander(\"Invalid Email or Password\", 401));\r\n+  }\r\n };\r\n"
                },
                {
                    "date": 1653721495183,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -75,5 +75,12 @@\n   const isPasswordMatched = user.comparePassword();\r\n   if (!isPasswordMatched) {\r\n     return next(new ErrorHander(\"Invalid Email or Password\", 401));\r\n   }\r\n+\r\n+  const token = user.getJWTToken();\r\n+  res.status(200).json({\r\n+    status: \"success\",\r\n+\r\n+    token,\r\n+  });\r\n };\r\n"
                },
                {
                    "date": 1653722942221,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -71,16 +71,15 @@\n   const user = await authModel.findOne({ email }).select(\"+password\");\r\n   if (!user) {\r\n     return next(new ErrorHander(\"Invalid Email or Password\", 401));\r\n   }\r\n-  const isPasswordMatched = user.comparePassword();\r\n+  const isPasswordMatched = user.comparePassword(password);\r\n   if (!isPasswordMatched) {\r\n     return next(new ErrorHander(\"Invalid Email or Password\", 401));\r\n   }\r\n \r\n   const token = user.getJWTToken();\r\n   res.status(200).json({\r\n     status: \"success\",\r\n-\r\n     token,\r\n   });\r\n };\r\n"
                },
                {
                    "date": 1653723117368,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -71,9 +71,9 @@\n   const user = await authModel.findOne({ email }).select(\"+password\");\r\n   if (!user) {\r\n     return next(new ErrorHander(\"Invalid Email or Password\", 401));\r\n   }\r\n-  const isPasswordMatched = user.comparePassword(password);\r\n+  const isPasswordMatched = await user.comparePassword(password);\r\n   if (!isPasswordMatched) {\r\n     return next(new ErrorHander(\"Invalid Email or Password\", 401));\r\n   }\r\n \r\n"
                },
                {
                    "date": 1653724035650,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -68,12 +68,15 @@\n   if (!email || !password) {\r\n     return next(new ErrorHander(\"Please Enter Email && Password !!!\", 400));\r\n   }\r\n   const user = await authModel.findOne({ email }).select(\"+password\");\r\n+\r\n   if (!user) {\r\n     return next(new ErrorHander(\"Invalid Email or Password\", 401));\r\n   }\r\n+\r\n   const isPasswordMatched = await user.comparePassword(password);\r\n+\r\n   if (!isPasswordMatched) {\r\n     return next(new ErrorHander(\"Invalid Email or Password\", 401));\r\n   }\r\n \r\n"
                },
                {
                    "date": 1653724333819,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,7 +1,8 @@\n const authModel = require(\"../models/User\");\r\n const jwt = require(\"jsonwebtoken\");\r\n const bcrypt = require(\"bcryptjs\");\r\n+const sendToken = require(\"../../util/jwtToken\");\r\n exports.register = async (req, res, next) => {\r\n   try {\r\n     //req.body - name, email, password\r\n     const { name, email, password } = req.body;\r\n@@ -79,10 +80,6 @@\n   if (!isPasswordMatched) {\r\n     return next(new ErrorHander(\"Invalid Email or Password\", 401));\r\n   }\r\n \r\n-  const token = user.getJWTToken();\r\n-  res.status(200).json({\r\n-    status: \"success\",\r\n-    token,\r\n-  });\r\n+  sendToken(user, 200, res);\r\n };\r\n"
                },
                {
                    "date": 1653724367731,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -15,16 +15,9 @@\n         url: \"ProfilePicUrl\",\r\n       },\r\n     });\r\n     // const token = await jwt.sign({ userId: user._id }, process.env.APP_SECRET);\r\n-    const token = user.getJWTToken();\r\n-    res.status(200).json({\r\n-      status: \"success\",\r\n-      data: {\r\n-        user,\r\n-        token,\r\n-      },\r\n-    });\r\n+    sendToken(user, 200, res);\r\n   } catch (error) {\r\n     next(error);\r\n   }\r\n };\r\n"
                },
                {
                    "date": 1653837714511,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,8 +1,8 @@\n const authModel = require(\"../models/User\");\r\n const jwt = require(\"jsonwebtoken\");\r\n const bcrypt = require(\"bcryptjs\");\r\n-const sendToken = require(\"../../util/jwtToken\");\r\n+const sendToken = require(\"../../utils/jwtToken\");\r\n exports.register = async (req, res, next) => {\r\n   try {\r\n     //req.body - name, email, password\r\n     const { name, email, password } = req.body;\r\n@@ -15,9 +15,9 @@\n         url: \"ProfilePicUrl\",\r\n       },\r\n     });\r\n     // const token = await jwt.sign({ userId: user._id }, process.env.APP_SECRET);\r\n-    sendToken(user, 200, res);\r\n+    sendToken(user, 201, res);\r\n   } catch (error) {\r\n     next(error);\r\n   }\r\n };\r\n"
                },
                {
                    "date": 1654065882096,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -75,4 +75,11 @@\n   }\r\n \r\n   sendToken(user, 200, res);\r\n };\r\n+\r\n+const Logout = async (req, res, next) => {\r\n+  res.status(200).json({\r\n+    success: true,\r\n+    message: \"Logged Out\",\r\n+  });\r\n+};\r\n"
                },
                {
                    "date": 1654065945894,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -77,8 +77,12 @@\n   sendToken(user, 200, res);\r\n };\r\n \r\n const Logout = async (req, res, next) => {\r\n+  req.cookie(\"token\", null, {\r\n+    expires: new Date(Date.now()),\r\n+    httpOnly: true,\r\n+  });\r\n   res.status(200).json({\r\n     success: true,\r\n     message: \"Logged Out\",\r\n   });\r\n"
                },
                {
                    "date": 1654066163663,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -76,9 +76,9 @@\n \r\n   sendToken(user, 200, res);\r\n };\r\n \r\n-const Logout = async (req, res, next) => {\r\n+const logout = async (req, res, next) => {\r\n   req.cookie(\"token\", null, {\r\n     expires: new Date(Date.now()),\r\n     httpOnly: true,\r\n   });\r\n"
                },
                {
                    "date": 1654066255997,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -76,9 +76,9 @@\n \r\n   sendToken(user, 200, res);\r\n };\r\n \r\n-const logout = async (req, res, next) => {\r\n+exports.logout = async (req, res, next) => {\r\n   req.cookie(\"token\", null, {\r\n     expires: new Date(Date.now()),\r\n     httpOnly: true,\r\n   });\r\n"
                },
                {
                    "date": 1654138258678,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -77,9 +77,9 @@\n   sendToken(user, 200, res);\r\n };\r\n \r\n exports.logout = async (req, res, next) => {\r\n-  req.cookie(\"token\", null, {\r\n+  res.cookie(\"token\", null, {\r\n     expires: new Date(Date.now()),\r\n     httpOnly: true,\r\n   });\r\n   res.status(200).json({\r\n"
                },
                {
                    "date": 1654613410354,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,89 @@\n+const authModel = require(\"../models/User\");\r\n+const jwt = require(\"jsonwebtoken\");\r\n+const bcrypt = require(\"bcryptjs\");\r\n+const sendToken = require(\"../../utils/jwtToken\");\r\n+exports.register = async (req, res, next) => {\r\n+  try {\r\n+    //req.body - name, email, password\r\n+    const { name, email, password } = req.body;\r\n+    const user = await authModel.create({\r\n+      name,\r\n+      email,\r\n+      password,\r\n+      avatar: {\r\n+        public_id: \"this is a sample id\",\r\n+        url: \"ProfilePicUrl\",\r\n+      },\r\n+    });\r\n+    // const token = await jwt.sign({ userId: user._id }, process.env.APP_SECRET);\r\n+    sendToken(user, 201, res);\r\n+  } catch (error) {\r\n+    next(error);\r\n+  }\r\n+};\r\n+\r\n+exports.login = async (req, res, next) => {\r\n+  try {\r\n+    const user = await authModel.findOne({\r\n+      email: req.body.email,\r\n+      username: req.body.name,\r\n+    });\r\n+    if (!user) {\r\n+      //email is not correct\r\n+      const err = new Error(\"Email not correct!\");\r\n+      err.statusCode = 400;\r\n+      return next(err);\r\n+    }\r\n+    //body.password = password entered , user.password = encrypted password in db\r\n+    if (bcrypt.compareSync(req.body.password, user.password)) {\r\n+      const token = jwt.sign({ userId: user._id }, process.env.APP_SECRET);\r\n+      res.status(200).json({\r\n+        status: \"success\",\r\n+        data: {\r\n+          token,\r\n+          userName: user.name,\r\n+        },\r\n+      });\r\n+    } else {\r\n+      //password is not correct\r\n+\r\n+      const err = new Error(\"Password not correct!\");\r\n+      err.statusCode = 400;\r\n+      return next(err);\r\n+    }\r\n+  } catch (error) {\r\n+    next(error);\r\n+  }\r\n+};\r\n+\r\n+// exports.login = async (req, res, next) => {\r\n+//   const { email, password } = req.body;\r\n+\r\n+//   if (!email || !password) {\r\n+//     return next(new ErrorHander(\"Please Enter Email && Password !!!\", 400));\r\n+//   }\r\n+//   const user = await authModel.findOne({ email }).select(\"+password\");\r\n+\r\n+//   if (!user) {\r\n+//     return next(new ErrorHander(\"Invalid Email or Password\", 401));\r\n+//   }\r\n+\r\n+//   const isPasswordMatched = await user.comparePassword(password);\r\n+\r\n+//   if (!isPasswordMatched) {\r\n+//     return next(new ErrorHander(\"Invalid Email or Password\", 401));\r\n+//   }\r\n+\r\n+//   sendToken(user, 200, res);\r\n+// };\r\n+\r\n+exports.logout = async (req, res, next) => {\r\n+  res.cookie(\"token\", null, {\r\n+    expires: new Date(Date.now()),\r\n+    httpOnly: true,\r\n+  });\r\n+  res.status(200).json({\r\n+    success: true,\r\n+    message: \"Logged Out\",\r\n+  });\r\n+};\r\n"
                },
                {
                    "date": 1654613690443,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -86,93 +86,4 @@\n     success: true,\r\n     message: \"Logged Out\",\r\n   });\r\n };\r\n-const authModel = require(\"../models/User\");\r\n-const jwt = require(\"jsonwebtoken\");\r\n-const bcrypt = require(\"bcryptjs\");\r\n-const sendToken = require(\"../../utils/jwtToken\");\r\n-exports.register = async (req, res, next) => {\r\n-  try {\r\n-    //req.body - name, email, password\r\n-    const { name, email, password } = req.body;\r\n-    const user = await authModel.create({\r\n-      name,\r\n-      email,\r\n-      password,\r\n-      avatar: {\r\n-        public_id: \"this is a sample id\",\r\n-        url: \"ProfilePicUrl\",\r\n-      },\r\n-    });\r\n-    // const token = await jwt.sign({ userId: user._id }, process.env.APP_SECRET);\r\n-    sendToken(user, 201, res);\r\n-  } catch (error) {\r\n-    next(error);\r\n-  }\r\n-};\r\n-\r\n-// exports.login = async (req, res, next) => {\r\n-//   try {\r\n-//     const user = await authModel.findOne({\r\n-//       email: req.body.email,\r\n-//       username: req.body.name,\r\n-//     });\r\n-//     if (!user) {\r\n-//       //email is not correct\r\n-//       const err = new Error(\"Email not correct!\");\r\n-//       err.statusCode = 400;\r\n-//       return next(err);\r\n-//     }\r\n-//     //body.password = password entered , user.password = encrypted password in db\r\n-//     if (bcrypt.compareSync(req.body.password, user.password)) {\r\n-//       const token = jwt.sign({ userId: user._id }, process.env.APP_SECRET);\r\n-//       res.status(200).json({\r\n-//         status: \"success\",\r\n-//         data: {\r\n-//           token,\r\n-//           userName: user.name,\r\n-//         },\r\n-//       });\r\n-//     } else {\r\n-//       //password is not correct\r\n-\r\n-//       const err = new Error(\"Password not correct!\");\r\n-//       err.statusCode = 400;\r\n-//       return next(err);\r\n-//     }\r\n-//   } catch (error) {\r\n-//     next(error);\r\n-//   }\r\n-// };\r\n-\r\n-exports.login = async (req, res, next) => {\r\n-  const { email, password } = req.body;\r\n-\r\n-  if (!email || !password) {\r\n-    return next(new ErrorHander(\"Please Enter Email && Password !!!\", 400));\r\n-  }\r\n-  const user = await authModel.findOne({ email }).select(\"+password\");\r\n-\r\n-  if (!user) {\r\n-    return next(new ErrorHander(\"Invalid Email or Password\", 401));\r\n-  }\r\n-\r\n-  const isPasswordMatched = await user.comparePassword(password);\r\n-\r\n-  if (!isPasswordMatched) {\r\n-    return next(new ErrorHander(\"Invalid Email or Password\", 401));\r\n-  }\r\n-\r\n-  sendToken(user, 200, res);\r\n-};\r\n-\r\n-exports.logout = async (req, res, next) => {\r\n-  res.cookie(\"token\", null, {\r\n-    expires: new Date(Date.now()),\r\n-    httpOnly: true,\r\n-  });\r\n-  res.status(200).json({\r\n-    success: true,\r\n-    message: \"Logged Out\",\r\n-  });\r\n-};\r\n"
                },
                {
                    "date": 1654613836526,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -25,9 +25,8 @@\n exports.login = async (req, res, next) => {\r\n   try {\r\n     const user = await authModel.findOne({\r\n       email: req.body.email,\r\n-      username: req.body.name,\r\n     });\r\n     if (!user) {\r\n       //email is not correct\r\n       const err = new Error(\"Email not correct!\");\r\n"
                },
                {
                    "date": 1654614041851,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -14,10 +14,17 @@\n         public_id: \"this is a sample id\",\r\n         url: \"ProfilePicUrl\",\r\n       },\r\n     });\r\n-    // const token = await jwt.sign({ userId: user._id }, process.env.APP_SECRET);\r\n-    sendToken(user, 201, res);\r\n+    const token = await jwt.sign({ userId: user._id }, process.env.APP_SECRET);\r\n+    res.status(200).json({\r\n+      status: \"success\",\r\n+      data: {\r\n+        token,\r\n+\r\n+        userName: user.name,\r\n+      },\r\n+    });\r\n   } catch (error) {\r\n     next(error);\r\n   }\r\n };\r\n"
                },
                {
                    "date": 1654614508116,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,8 +1,9 @@\n const authModel = require(\"../models/User\");\r\n const jwt = require(\"jsonwebtoken\");\r\n const bcrypt = require(\"bcryptjs\");\r\n const sendToken = require(\"../../utils/jwtToken\");\r\n+const { json } = require(\"express\");\r\n exports.register = async (req, res, next) => {\r\n   try {\r\n     //req.body - name, email, password\r\n     const { name, email, password } = req.body;\r\n@@ -19,9 +20,8 @@\n     res.status(200).json({\r\n       status: \"success\",\r\n       data: {\r\n         token,\r\n-\r\n         userName: user.name,\r\n       },\r\n     });\r\n   } catch (error) {\r\n@@ -57,9 +57,10 @@\n       err.statusCode = 400;\r\n       return next(err);\r\n     }\r\n   } catch (error) {\r\n-    next(error);\r\n+    // next(error);\r\n+    res.json(error);\r\n   }\r\n };\r\n \r\n // exports.login = async (req, res, next) => {\r\n"
                },
                {
                    "date": 1654614934356,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,14 +1,14 @@\n-const authModel = require(\"../models/User\");\r\n+const User = require(\"../models/User\");\r\n const jwt = require(\"jsonwebtoken\");\r\n const bcrypt = require(\"bcryptjs\");\r\n const sendToken = require(\"../../utils/jwtToken\");\r\n const { json } = require(\"express\");\r\n exports.register = async (req, res, next) => {\r\n   try {\r\n     //req.body - name, email, password\r\n     const { name, email, password } = req.body;\r\n-    const user = await authModel.create({\r\n+    const user = await User.create({\r\n       name,\r\n       email,\r\n       password,\r\n       avatar: {\r\n@@ -30,9 +30,9 @@\n };\r\n \r\n exports.login = async (req, res, next) => {\r\n   try {\r\n-    const user = await authModel.findOne({\r\n+    const user = await User.findOne({\r\n       email: req.body.email,\r\n     });\r\n     if (!user) {\r\n       //email is not correct\r\n@@ -49,8 +49,9 @@\n           token,\r\n           userName: user.name,\r\n         },\r\n       });\r\n+      console.log(token);\r\n     } else {\r\n       //password is not correct\r\n \r\n       const err = new Error(\"Password not correct!\");\r\n@@ -68,9 +69,9 @@\n \r\n //   if (!email || !password) {\r\n //     return next(new ErrorHander(\"Please Enter Email && Password !!!\", 400));\r\n //   }\r\n-//   const user = await authModel.findOne({ email }).select(\"+password\");\r\n+//   const user = await User.findOne({ email }).select(\"+password\");\r\n \r\n //   if (!user) {\r\n //     return next(new ErrorHander(\"Invalid Email or Password\", 401));\r\n //   }\r\n"
                },
                {
                    "date": 1654615017265,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -15,9 +15,9 @@\n         public_id: \"this is a sample id\",\r\n         url: \"ProfilePicUrl\",\r\n       },\r\n     });\r\n-    const token = await jwt.sign({ userId: user._id }, process.env.APP_SECRET);\r\n+    const token = jwt.sign({ userId: user._id }, process.env.APP_SECRET);\r\n     res.status(200).json({\r\n       status: \"success\",\r\n       data: {\r\n         token,\r\n"
                },
                {
                    "date": 1654615508912,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -5,18 +5,19 @@\n const { json } = require(\"express\");\r\n exports.register = async (req, res, next) => {\r\n   try {\r\n     //req.body - name, email, password\r\n-    const { name, email, password } = req.body;\r\n-    const user = await User.create({\r\n-      name,\r\n-      email,\r\n-      password,\r\n-      avatar: {\r\n-        public_id: \"this is a sample id\",\r\n-        url: \"ProfilePicUrl\",\r\n-      },\r\n-    });\r\n+    // const { name, email, password } = req.body;\r\n+    // const user = await User.create({\r\n+    //   name,\r\n+    //   email,\r\n+    //   password,\r\n+    //   avatar: {\r\n+    //     public_id: \"this is a sample id\",\r\n+    //     url: \"ProfilePicUrl\",\r\n+    //   },\r\n+    // });\r\n+    const user = await User.create(req.body);\r\n     const token = jwt.sign({ userId: user._id }, process.env.APP_SECRET);\r\n     res.status(200).json({\r\n       status: \"success\",\r\n       data: {\r\n"
                },
                {
                    "date": 1654615750142,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,71 +1,74 @@\n const User = require(\"../models/User\");\r\n const jwt = require(\"jsonwebtoken\");\r\n const bcrypt = require(\"bcryptjs\");\r\n-const sendToken = require(\"../../utils/jwtToken\");\r\n-const { json } = require(\"express\");\r\n-exports.register = async (req, res, next) => {\r\n-  try {\r\n-    //req.body - name, email, password\r\n-    // const { name, email, password } = req.body;\r\n-    // const user = await User.create({\r\n-    //   name,\r\n-    //   email,\r\n-    //   password,\r\n-    //   avatar: {\r\n-    //     public_id: \"this is a sample id\",\r\n-    //     url: \"ProfilePicUrl\",\r\n-    //   },\r\n-    // });\r\n-    const user = await User.create(req.body);\r\n-    const token = jwt.sign({ userId: user._id }, process.env.APP_SECRET);\r\n-    res.status(200).json({\r\n-      status: \"success\",\r\n-      data: {\r\n-        token,\r\n-        userName: user.name,\r\n-      },\r\n-    });\r\n-  } catch (error) {\r\n-    next(error);\r\n-  }\r\n-};\r\n-\r\n exports.login = async (req, res, next) => {\r\n   try {\r\n-    const user = await User.findOne({\r\n-      email: req.body.email,\r\n-    });\r\n+    const user = await User.findOne({ email: req.body.email });\r\n     if (!user) {\r\n-      //email is not correct\r\n-      const err = new Error(\"Email not correct!\");\r\n+      //Error:  Email is not correct\r\n+      const err = new Error(\"Email is not correct !!\");\r\n       err.statusCode = 400;\r\n       return next(err);\r\n     }\r\n-    //body.password = password entered , user.password = encrypted password in db\r\n+\r\n     if (bcrypt.compareSync(req.body.password, user.password)) {\r\n-      const token = jwt.sign({ userId: user._id }, process.env.APP_SECRET);\r\n+      const token = jwt.sign(\r\n+        {\r\n+          userId: user._id,\r\n+          email: user.email,\r\n+          userName: user.username,\r\n+          role: user.role,\r\n+        },\r\n+        process.env.APP_SECRECT\r\n+      );\r\n       res.status(200).json({\r\n         status: \"success\",\r\n         data: {\r\n           token,\r\n-          userName: user.name,\r\n+          email: user.email,\r\n+          userName: user.username,\r\n+          role: user.role,\r\n         },\r\n       });\r\n-      console.log(token);\r\n     } else {\r\n-      //password is not correct\r\n-\r\n-      const err = new Error(\"Password not correct!\");\r\n+      //Error: password is not correct\r\n+      const err = new Error(\"Password is not correct !!\");\r\n       err.statusCode = 400;\r\n       return next(err);\r\n     }\r\n   } catch (error) {\r\n-    // next(error);\r\n     res.json(error);\r\n   }\r\n };\r\n \r\n+exports.register = async (req, res, next) => {\r\n+  try {\r\n+    const user = await User.create(req.body);\r\n+    const token = jwt.sign({ userId: user._id }, process.env.APP_SECRECT);\r\n+    res.status(200).json({\r\n+      status: \"success\",\r\n+      data: {\r\n+        token,\r\n+        email: user.email,\r\n+        userName: user.username,\r\n+        role: user.role,\r\n+      },\r\n+    });\r\n+  } catch (error) {\r\n+    next(error);\r\n+  }\r\n+};\r\n+\r\n+exports.getAllUser = async (req, res, next) => {\r\n+  const user = await User.find({});\r\n+  res.status(200).json({\r\n+    status: \"success\",\r\n+    result: user.length,\r\n+    data: user,\r\n+  });\r\n+};\r\n+\r\n // exports.login = async (req, res, next) => {\r\n //   const { email, password } = req.body;\r\n \r\n //   if (!email || !password) {\r\n"
                },
                {
                    "date": 1654615820644,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -14,11 +14,11 @@\n     if (bcrypt.compareSync(req.body.password, user.password)) {\r\n       const token = jwt.sign(\r\n         {\r\n           userId: user._id,\r\n-          email: user.email,\r\n-          userName: user.username,\r\n-          role: user.role,\r\n+          // email: user.email,\r\n+          // userName: user.username,\r\n+          // role: user.role,\r\n         },\r\n         process.env.APP_SECRECT\r\n       );\r\n       res.status(200).json({\r\n"
                },
                {
                    "date": 1654615843189,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -43,9 +43,9 @@\n \r\n exports.register = async (req, res, next) => {\r\n   try {\r\n     const user = await User.create(req.body);\r\n-    const token = jwt.sign({ userId: user._id }, process.env.APP_SECRECT);\r\n+    const token = jwt.sign({ userId: user._id }, process.env.APP_SECRET);\r\n     res.status(200).json({\r\n       status: \"success\",\r\n       data: {\r\n         token,\r\n"
                },
                {
                    "date": 1654616089481,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -24,9 +24,8 @@\n       res.status(200).json({\r\n         status: \"success\",\r\n         data: {\r\n           token,\r\n-          email: user.email,\r\n           userName: user.username,\r\n           role: user.role,\r\n         },\r\n       });\r\n"
                },
                {
                    "date": 1654616107478,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -28,8 +28,9 @@\n           userName: user.username,\r\n           role: user.role,\r\n         },\r\n       });\r\n+      console.log(data);\r\n     } else {\r\n       //Error: password is not correct\r\n       const err = new Error(\"Password is not correct !!\");\r\n       err.statusCode = 400;\r\n"
                },
                {
                    "date": 1654616136930,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -28,15 +28,15 @@\n           userName: user.username,\r\n           role: user.role,\r\n         },\r\n       });\r\n-      console.log(data);\r\n     } else {\r\n       //Error: password is not correct\r\n       const err = new Error(\"Password is not correct !!\");\r\n       err.statusCode = 400;\r\n       return next(err);\r\n     }\r\n+    console.log(data);\r\n   } catch (error) {\r\n     res.json(error);\r\n   }\r\n };\r\n"
                },
                {
                    "date": 1654616387219,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -49,10 +49,10 @@\n       status: \"success\",\r\n       data: {\r\n         token,\r\n         email: user.email,\r\n-        userName: user.username,\r\n-        role: user.role,\r\n+        userName: user.name,\r\n+        role: user.roles,\r\n       },\r\n     });\r\n   } catch (error) {\r\n     next(error);\r\n"
                },
                {
                    "date": 1654616440917,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -58,16 +58,16 @@\n     next(error);\r\n   }\r\n };\r\n \r\n-exports.getAllUser = async (req, res, next) => {\r\n-  const user = await User.find({});\r\n-  res.status(200).json({\r\n-    status: \"success\",\r\n-    result: user.length,\r\n-    data: user,\r\n-  });\r\n-};\r\n+// exports.getAllUser = async (req, res, next) => {\r\n+//   const user = await User.find({});\r\n+//   res.status(200).json({\r\n+//     status: \"success\",\r\n+//     result: user.length,\r\n+//     data: user,\r\n+//   });\r\n+// };\r\n \r\n // exports.login = async (req, res, next) => {\r\n //   const { email, password } = req.body;\r\n \r\n"
                },
                {
                    "date": 1654616476590,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -14,11 +14,8 @@\n     if (bcrypt.compareSync(req.body.password, user.password)) {\r\n       const token = jwt.sign(\r\n         {\r\n           userId: user._id,\r\n-          // email: user.email,\r\n-          // userName: user.username,\r\n-          // role: user.role,\r\n         },\r\n         process.env.APP_SECRECT\r\n       );\r\n       res.status(200).json({\r\n"
                },
                {
                    "date": 1654616494454,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -22,9 +22,8 @@\n         status: \"success\",\r\n         data: {\r\n           token,\r\n           userName: user.username,\r\n-          role: user.role,\r\n         },\r\n       });\r\n     } else {\r\n       //Error: password is not correct\r\n"
                },
                {
                    "date": 1654616588584,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -11,14 +11,9 @@\n       return next(err);\r\n     }\r\n \r\n     if (bcrypt.compareSync(req.body.password, user.password)) {\r\n-      const token = jwt.sign(\r\n-        {\r\n-          userId: user._id,\r\n-        },\r\n-        process.env.APP_SECRECT\r\n-      );\r\n+      const token = jwt.sign({ userId: user._id }, process.env.APP_SECRECT);\r\n       res.status(200).json({\r\n         status: \"success\",\r\n         data: {\r\n           token,\r\n"
                },
                {
                    "date": 1654616663930,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -25,9 +25,8 @@\n       const err = new Error(\"Password is not correct !!\");\r\n       err.statusCode = 400;\r\n       return next(err);\r\n     }\r\n-    console.log(data);\r\n   } catch (error) {\r\n     res.json(error);\r\n   }\r\n };\r\n"
                },
                {
                    "date": 1654617413785,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -78,14 +78,14 @@\n \r\n //   sendToken(user, 200, res);\r\n // };\r\n \r\n-exports.logout = async (req, res, next) => {\r\n-  res.cookie(\"token\", null, {\r\n-    expires: new Date(Date.now()),\r\n-    httpOnly: true,\r\n-  });\r\n-  res.status(200).json({\r\n-    success: true,\r\n-    message: \"Logged Out\",\r\n-  });\r\n-};\r\n+// exports.logout = async (req, res, next) => {\r\n+//   res.cookie(\"token\", null, {\r\n+//     expires: new Date(Date.now()),\r\n+//     httpOnly: true,\r\n+//   });\r\n+//   res.status(200).json({\r\n+//     success: true,\r\n+//     message: \"Logged Out\",\r\n+//   });\r\n+// };\r\n"
                },
                {
                    "date": 1654619084139,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,92 @@\n+const User = require(\"../models/User\");\r\n+const jwt = require(\"jsonwebtoken\");\r\n+const bcrypt = require(\"bcryptjs\");\r\n+exports.login = async (req, res, next) => {\r\n+  // try {\r\n+  //   const user = await User.findOne({ email: req.body.email });\r\n+  //   if (!user) {\r\n+  //     //Error:  Email is not correct\r\n+  //     const err = new Error(\"Email is not correct !!\");\r\n+  //     err.statusCode = 400;\r\n+  //     return next(err);\r\n+  //   }\r\n+\r\n+  //   if (bcrypt.compareSync(req.body.password, user.password)) {\r\n+  //     const token = jwt.sign({ userId: user._id }, process.env.APP_SECRECT);\r\n+  //     res.status(200).json({\r\n+  //       status: \"success\",\r\n+  //       data: {\r\n+  //         token,\r\n+  //         userName: user.username,\r\n+  //       },\r\n+  //     });\r\n+  //   } else {\r\n+  //     //Error: password is not correct\r\n+  //     const err = new Error(\"Password is not correct !!\");\r\n+  //     err.statusCode = 400;\r\n+  //     return next(err);\r\n+  //   }\r\n+  // } catch (error) {\r\n+  //   res.json(error);\r\n+  // }\r\n+  res.status(200).json({ message: \"login\" });\r\n+};\r\n+\r\n+exports.register = async (req, res, next) => {\r\n+  try {\r\n+    const user = await User.create(req.body);\r\n+    const token = jwt.sign({ userId: user._id }, process.env.APP_SECRET);\r\n+    res.status(200).json({\r\n+      status: \"success\",\r\n+      data: {\r\n+        token,\r\n+        email: user.email,\r\n+        userName: user.name,\r\n+        role: user.roles,\r\n+      },\r\n+    });\r\n+  } catch (error) {\r\n+    next(error);\r\n+  }\r\n+};\r\n+\r\n+// exports.getAllUser = async (req, res, next) => {\r\n+//   const user = await User.find({});\r\n+//   res.status(200).json({\r\n+//     status: \"success\",\r\n+//     result: user.length,\r\n+//     data: user,\r\n+//   });\r\n+// };\r\n+\r\n+// exports.login = async (req, res, next) => {\r\n+//   const { email, password } = req.body;\r\n+\r\n+//   if (!email || !password) {\r\n+//     return next(new ErrorHander(\"Please Enter Email && Password !!!\", 400));\r\n+//   }\r\n+//   const user = await User.findOne({ email }).select(\"+password\");\r\n+\r\n+//   if (!user) {\r\n+//     return next(new ErrorHander(\"Invalid Email or Password\", 401));\r\n+//   }\r\n+\r\n+//   const isPasswordMatched = await user.comparePassword(password);\r\n+\r\n+//   if (!isPasswordMatched) {\r\n+//     return next(new ErrorHander(\"Invalid Email or Password\", 401));\r\n+//   }\r\n+\r\n+//   sendToken(user, 200, res);\r\n+// };\r\n+\r\n+// exports.logout = async (req, res, next) => {\r\n+//   res.cookie(\"token\", null, {\r\n+//     expires: new Date(Date.now()),\r\n+//     httpOnly: true,\r\n+//   });\r\n+//   res.status(200).json({\r\n+//     success: true,\r\n+//     message: \"Logged Out\",\r\n+//   });\r\n+// };\r\n"
                },
                {
                    "date": 1654619142104,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,108 +1,16 @@\n const User = require(\"../models/User\");\r\n const jwt = require(\"jsonwebtoken\");\r\n const bcrypt = require(\"bcryptjs\");\r\n exports.login = async (req, res, next) => {\r\n-  // try {\r\n-  //   const user = await User.findOne({ email: req.body.email });\r\n-  //   if (!user) {\r\n-  //     //Error:  Email is not correct\r\n-  //     const err = new Error(\"Email is not correct !!\");\r\n-  //     err.statusCode = 400;\r\n-  //     return next(err);\r\n-  //   }\r\n-\r\n-  //   if (bcrypt.compareSync(req.body.password, user.password)) {\r\n-  //     const token = jwt.sign({ userId: user._id }, process.env.APP_SECRECT);\r\n-  //     res.status(200).json({\r\n-  //       status: \"success\",\r\n-  //       data: {\r\n-  //         token,\r\n-  //         userName: user.username,\r\n-  //       },\r\n-  //     });\r\n-  //   } else {\r\n-  //     //Error: password is not correct\r\n-  //     const err = new Error(\"Password is not correct !!\");\r\n-  //     err.statusCode = 400;\r\n-  //     return next(err);\r\n-  //   }\r\n-  // } catch (error) {\r\n-  //   res.json(error);\r\n-  // }\r\n-  res.status(200).json({ message: \"login\" });\r\n-};\r\n-\r\n-exports.register = async (req, res, next) => {\r\n   try {\r\n-    const user = await User.create(req.body);\r\n-    const token = jwt.sign({ userId: user._id }, process.env.APP_SECRET);\r\n-    res.status(200).json({\r\n-      status: \"success\",\r\n-      data: {\r\n-        token,\r\n-        email: user.email,\r\n-        userName: user.name,\r\n-        role: user.roles,\r\n-      },\r\n-    });\r\n-  } catch (error) {\r\n-    next(error);\r\n-  }\r\n-};\r\n-\r\n-// exports.getAllUser = async (req, res, next) => {\r\n-//   const user = await User.find({});\r\n-//   res.status(200).json({\r\n-//     status: \"success\",\r\n-//     result: user.length,\r\n-//     data: user,\r\n-//   });\r\n-// };\r\n-\r\n-// exports.login = async (req, res, next) => {\r\n-//   const { email, password } = req.body;\r\n-\r\n-//   if (!email || !password) {\r\n-//     return next(new ErrorHander(\"Please Enter Email && Password !!!\", 400));\r\n-//   }\r\n-//   const user = await User.findOne({ email }).select(\"+password\");\r\n-\r\n-//   if (!user) {\r\n-//     return next(new ErrorHander(\"Invalid Email or Password\", 401));\r\n-//   }\r\n-\r\n-//   const isPasswordMatched = await user.comparePassword(password);\r\n-\r\n-//   if (!isPasswordMatched) {\r\n-//     return next(new ErrorHander(\"Invalid Email or Password\", 401));\r\n-//   }\r\n-\r\n-//   sendToken(user, 200, res);\r\n-// };\r\n-\r\n-// exports.logout = async (req, res, next) => {\r\n-//   res.cookie(\"token\", null, {\r\n-//     expires: new Date(Date.now()),\r\n-//     httpOnly: true,\r\n-//   });\r\n-//   res.status(200).json({\r\n-//     success: true,\r\n-//     message: \"Logged Out\",\r\n-//   });\r\n-// };\r\n-const User = require(\"../models/User\");\r\n-const jwt = require(\"jsonwebtoken\");\r\n-const bcrypt = require(\"bcryptjs\");\r\n-exports.login = async (req, res, next) => {\r\n-  try {\r\n     const user = await User.findOne({ email: req.body.email });\r\n-    if (!user) {\r\n-      //Error:  Email is not correct\r\n-      const err = new Error(\"Email is not correct !!\");\r\n-      err.statusCode = 400;\r\n-      return next(err);\r\n-    }\r\n+    // if (!user) {\r\n+    //   //Error:  Email is not correct\r\n+    //   const err = new Error(\"Email is not correct !!\");\r\n+    //   err.statusCode = 400;\r\n+    //   return next(err);\r\n+    // }\r\n \r\n     if (bcrypt.compareSync(req.body.password, user.password)) {\r\n       const token = jwt.sign({ userId: user._id }, process.env.APP_SECRECT);\r\n       res.status(200).json({\r\n@@ -111,17 +19,19 @@\n           token,\r\n           userName: user.username,\r\n         },\r\n       });\r\n-    } else {\r\n-      //Error: password is not correct\r\n-      const err = new Error(\"Password is not correct !!\");\r\n-      err.statusCode = 400;\r\n-      return next(err);\r\n     }\r\n+    //  else {\r\n+    //   //Error: password is not correct\r\n+    //   const err = new Error(\"Password is not correct !!\");\r\n+    //   err.statusCode = 400;\r\n+    //   return next(err);\r\n+    // }\r\n   } catch (error) {\r\n     res.json(error);\r\n   }\r\n+  // res.status(200).json({ message: \"login\" });\r\n };\r\n \r\n exports.register = async (req, res, next) => {\r\n   try {\r\n"
                },
                {
                    "date": 1654619291470,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -59,28 +59,28 @@\n //     data: user,\r\n //   });\r\n // };\r\n \r\n-// exports.login = async (req, res, next) => {\r\n-//   const { email, password } = req.body;\r\n+exports.login = async (req, res, next) => {\r\n+  const { email, password } = req.body;\r\n \r\n-//   if (!email || !password) {\r\n-//     return next(new ErrorHander(\"Please Enter Email && Password !!!\", 400));\r\n-//   }\r\n-//   const user = await User.findOne({ email }).select(\"+password\");\r\n+  if (!email || !password) {\r\n+    return next(new ErrorHander(\"Please Enter Email && Password !!!\", 400));\r\n+  }\r\n+  const user = await User.findOne({ email }).select(\"+password\");\r\n \r\n-//   if (!user) {\r\n-//     return next(new ErrorHander(\"Invalid Email or Password\", 401));\r\n-//   }\r\n+  if (!user) {\r\n+    return next(new ErrorHander(\"Invalid Email or Password\", 401));\r\n+  }\r\n \r\n-//   const isPasswordMatched = await user.comparePassword(password);\r\n+  const isPasswordMatched = await user.comparePassword(password);\r\n \r\n-//   if (!isPasswordMatched) {\r\n-//     return next(new ErrorHander(\"Invalid Email or Password\", 401));\r\n-//   }\r\n+  if (!isPasswordMatched) {\r\n+    return next(new ErrorHander(\"Invalid Email or Password\", 401));\r\n+  }\r\n \r\n-//   sendToken(user, 200, res);\r\n-// };\r\n+  sendToken(user, 200, res);\r\n+};\r\n \r\n // exports.logout = async (req, res, next) => {\r\n //   res.cookie(\"token\", null, {\r\n //     expires: new Date(Date.now()),\r\n"
                },
                {
                    "date": 1654619299612,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,39 +1,8 @@\n const User = require(\"../models/User\");\r\n const jwt = require(\"jsonwebtoken\");\r\n const bcrypt = require(\"bcryptjs\");\r\n-exports.login = async (req, res, next) => {\r\n-  try {\r\n-    const user = await User.findOne({ email: req.body.email });\r\n-    // if (!user) {\r\n-    //   //Error:  Email is not correct\r\n-    //   const err = new Error(\"Email is not correct !!\");\r\n-    //   err.statusCode = 400;\r\n-    //   return next(err);\r\n-    // }\r\n \r\n-    if (bcrypt.compareSync(req.body.password, user.password)) {\r\n-      const token = jwt.sign({ userId: user._id }, process.env.APP_SECRECT);\r\n-      res.status(200).json({\r\n-        status: \"success\",\r\n-        data: {\r\n-          token,\r\n-          userName: user.username,\r\n-        },\r\n-      });\r\n-    }\r\n-    //  else {\r\n-    //   //Error: password is not correct\r\n-    //   const err = new Error(\"Password is not correct !!\");\r\n-    //   err.statusCode = 400;\r\n-    //   return next(err);\r\n-    // }\r\n-  } catch (error) {\r\n-    res.json(error);\r\n-  }\r\n-  // res.status(200).json({ message: \"login\" });\r\n-};\r\n-\r\n exports.register = async (req, res, next) => {\r\n   try {\r\n     const user = await User.create(req.body);\r\n     const token = jwt.sign({ userId: user._id }, process.env.APP_SECRET);\r\n"
                },
                {
                    "date": 1654619323823,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,8 +1,39 @@\n const User = require(\"../models/User\");\r\n const jwt = require(\"jsonwebtoken\");\r\n const bcrypt = require(\"bcryptjs\");\r\n+exports.login = async (req, res, next) => {\r\n+  try {\r\n+    const user = await User.findOne({ email: req.body.email });\r\n+    // if (!user) {\r\n+    //   //Error:  Email is not correct\r\n+    //   const err = new Error(\"Email is not correct !!\");\r\n+    //   err.statusCode = 400;\r\n+    //   return next(err);\r\n+    // }\r\n \r\n+    if (bcrypt.compareSync(req.body.password, user.password)) {\r\n+      const token = jwt.sign({ userId: user._id }, process.env.APP_SECRECT);\r\n+      res.status(200).json({\r\n+        status: \"success\",\r\n+        data: {\r\n+          token,\r\n+          userName: user.username,\r\n+        },\r\n+      });\r\n+    }\r\n+    //  else {\r\n+    //   //Error: password is not correct\r\n+    //   const err = new Error(\"Password is not correct !!\");\r\n+    //   err.statusCode = 400;\r\n+    //   return next(err);\r\n+    // }\r\n+  } catch (error) {\r\n+    res.json(error);\r\n+  }\r\n+  // res.status(200).json({ message: \"login\" });\r\n+};\r\n+\r\n exports.register = async (req, res, next) => {\r\n   try {\r\n     const user = await User.create(req.body);\r\n     const token = jwt.sign({ userId: user._id }, process.env.APP_SECRET);\r\n@@ -28,29 +59,8 @@\n //     data: user,\r\n //   });\r\n // };\r\n \r\n-exports.login = async (req, res, next) => {\r\n-  const { email, password } = req.body;\r\n-\r\n-  if (!email || !password) {\r\n-    return next(new ErrorHander(\"Please Enter Email && Password !!!\", 400));\r\n-  }\r\n-  const user = await User.findOne({ email }).select(\"+password\");\r\n-\r\n-  if (!user) {\r\n-    return next(new ErrorHander(\"Invalid Email or Password\", 401));\r\n-  }\r\n-\r\n-  const isPasswordMatched = await user.comparePassword(password);\r\n-\r\n-  if (!isPasswordMatched) {\r\n-    return next(new ErrorHander(\"Invalid Email or Password\", 401));\r\n-  }\r\n-\r\n-  sendToken(user, 200, res);\r\n-};\r\n-\r\n // exports.logout = async (req, res, next) => {\r\n //   res.cookie(\"token\", null, {\r\n //     expires: new Date(Date.now()),\r\n //     httpOnly: true,\r\n"
                },
                {
                    "date": 1654619416835,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -11,9 +11,9 @@\n     //   return next(err);\r\n     // }\r\n \r\n     if (bcrypt.compareSync(req.body.password, user.password)) {\r\n-      const token = jwt.sign({ userId: user._id }, process.env.APP_SECRECT);\r\n+      const token = jwt.sign({ userId: user.id }, process.env.APP_SECRET);\r\n       res.status(200).json({\r\n         status: \"success\",\r\n         data: {\r\n           token,\r\n"
                },
                {
                    "date": 1654619431208,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -17,8 +17,9 @@\n         status: \"success\",\r\n         data: {\r\n           token,\r\n           userName: user.username,\r\n+          message: \"login\",\r\n         },\r\n       });\r\n     }\r\n     //  else {\r\n"
                },
                {
                    "date": 1654619448039,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -20,8 +20,9 @@\n           userName: user.username,\r\n           message: \"login\",\r\n         },\r\n       });\r\n+      console.log(user);\r\n     }\r\n     //  else {\r\n     //   //Error: password is not correct\r\n     //   const err = new Error(\"Password is not correct !!\");\r\n"
                },
                {
                    "date": 1654619471633,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -20,9 +20,8 @@\n           userName: user.username,\r\n           message: \"login\",\r\n         },\r\n       });\r\n-      console.log(user);\r\n     }\r\n     //  else {\r\n     //   //Error: password is not correct\r\n     //   const err = new Error(\"Password is not correct !!\");\r\n"
                },
                {
                    "date": 1654619481481,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -3,14 +3,14 @@\n const bcrypt = require(\"bcryptjs\");\r\n exports.login = async (req, res, next) => {\r\n   try {\r\n     const user = await User.findOne({ email: req.body.email });\r\n-    // if (!user) {\r\n-    //   //Error:  Email is not correct\r\n-    //   const err = new Error(\"Email is not correct !!\");\r\n-    //   err.statusCode = 400;\r\n-    //   return next(err);\r\n-    // }\r\n+    if (!user) {\r\n+      //Error:  Email is not correct\r\n+      const err = new Error(\"Email is not correct !!\");\r\n+      err.statusCode = 400;\r\n+      return next(err);\r\n+    }\r\n \r\n     if (bcrypt.compareSync(req.body.password, user.password)) {\r\n       const token = jwt.sign({ userId: user.id }, process.env.APP_SECRET);\r\n       res.status(200).json({\r\n@@ -20,15 +20,14 @@\n           userName: user.username,\r\n           message: \"login\",\r\n         },\r\n       });\r\n+    } else {\r\n+      //Error: password is not correct\r\n+      const err = new Error(\"Password is not correct !!\");\r\n+      err.statusCode = 400;\r\n+      return next(err);\r\n     }\r\n-    //  else {\r\n-    //   //Error: password is not correct\r\n-    //   const err = new Error(\"Password is not correct !!\");\r\n-    //   err.statusCode = 400;\r\n-    //   return next(err);\r\n-    // }\r\n   } catch (error) {\r\n     res.json(error);\r\n   }\r\n   // res.status(200).json({ message: \"login\" });\r\n"
                },
                {
                    "date": 1654619507539,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -16,10 +16,9 @@\n       res.status(200).json({\r\n         status: \"success\",\r\n         data: {\r\n           token,\r\n-          userName: user.username,\r\n-          message: \"login\",\r\n+          userName: user.name,\r\n         },\r\n       });\r\n     } else {\r\n       //Error: password is not correct\r\n"
                },
                {
                    "date": 1654678537430,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -17,8 +17,9 @@\n         status: \"success\",\r\n         data: {\r\n           token,\r\n           userName: user.name,\r\n+          isAdmin: user.isAdmin,\r\n         },\r\n       });\r\n     } else {\r\n       //Error: password is not correct\r\n"
                },
                {
                    "date": 1654678574982,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -17,9 +17,9 @@\n         status: \"success\",\r\n         data: {\r\n           token,\r\n           userName: user.name,\r\n-          isAdmin: user.isAdmin,\r\n+          isAdmin,\r\n         },\r\n       });\r\n     } else {\r\n       //Error: password is not correct\r\n"
                },
                {
                    "date": 1654678776000,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -17,9 +17,9 @@\n         status: \"success\",\r\n         data: {\r\n           token,\r\n           userName: user.name,\r\n-          isAdmin,\r\n+          role = user.roles\r\n         },\r\n       });\r\n     } else {\r\n       //Error: password is not correct\r\n"
                },
                {
                    "date": 1654678782268,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -17,9 +17,9 @@\n         status: \"success\",\r\n         data: {\r\n           token,\r\n           userName: user.name,\r\n-          role = user.roles\r\n+          role: user.roles,\r\n         },\r\n       });\r\n     } else {\r\n       //Error: password is not correct\r\n"
                },
                {
                    "date": 1654680841812,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -49,8 +49,24 @@\n   } catch (error) {\r\n     next(error);\r\n   }\r\n };\r\n+exports.getCurrentUser = async (req, res, next) => {\r\n+  try {\r\n+    const data = { user: null };\r\n+    if (req.user) {\r\n+      const user = await User.findOne({ _id: req.user.userId });\r\n+      data.user = { userName: user.username };\r\n+    }\r\n+    res.status(200).json({\r\n+      status: \"success\",\r\n+      data: data,\r\n+    });\r\n+    console.log(data);\r\n+  } catch (error) {\r\n+    res.json(error);\r\n+  }\r\n+};\r\n \r\n // exports.getAllUser = async (req, res, next) => {\r\n //   const user = await User.find({});\r\n //   res.status(200).json({\r\n"
                },
                {
                    "date": 1654742895135,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -54,9 +54,9 @@\n   try {\r\n     const data = { user: null };\r\n     if (req.user) {\r\n       const user = await User.findOne({ _id: req.user.userId });\r\n-      data.user = { userName: user.username };\r\n+      data.user = { userName: user.name };\r\n     }\r\n     res.status(200).json({\r\n       status: \"success\",\r\n       data: data,\r\n"
                },
                {
                    "date": 1654744917243,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -61,8 +61,9 @@\n       status: \"success\",\r\n       data: data,\r\n     });\r\n     console.log(data);\r\n+    console.log(data);\r\n   } catch (error) {\r\n     res.json(error);\r\n   }\r\n };\r\n"
                }
            ],
            "date": 1651851975438,
            "name": "Commit-0",
            "content": "const authModel = require(\"../models/User\");\r\nconst jwt = require(\"jsonwebtoken\");\r\nconst bcrypt = require(\"bcryptjs\");\r\nexports.register = async (req, res, next) => {\r\n  try {\r\n    //req.body - name, email, password\r\n    const user = await authModel.create(req.body);\r\n    const token = await jwt.sign({ userId: user._id }, process.env.APP_SECRET);\r\n    res.status(200).json({\r\n      status: \"success\",\r\n      data: {\r\n        token,\r\n        userName: user.name,\r\n      },\r\n    });\r\n  } catch (error) {\r\n    res.json({ error: error });\r\n  }\r\n};\r\n\r\nexports.login = async (req, res, next) => {\r\n  try {\r\n    const user = await authModel.findOne({\r\n      email: req.body.email,\r\n      username: req.body.name,\r\n    });\r\n    if (!user) {\r\n      //email is not correct\r\n    }\r\n    //body.password = password entered , user.password = encrypted password in db\r\n    if (bcrypt.compareSync(req.body.password, user.password)) {\r\n      const token = jwt.sign({ userId: user._id }, process.env.APP_SECRET);\r\n      res.status(200).json({\r\n        status: \"success\",\r\n        data: {\r\n          token,\r\n          userName: user.name,\r\n        },\r\n      });\r\n    } else {\r\n      //password is not correct\r\n    }\r\n  } catch (error) {\r\n    res.json(error);\r\n  }\r\n};\r\n"
        }
    ]
}